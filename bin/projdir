#!perl

# DATE
# VERSION

use 5.010;
use strict;
use warnings;

use Perinci::CmdLine::Any;

my $prefix = "/App/projdir/";

Perinci::CmdLine::Any->new(
    url => "$prefix",
    subcommands => {
        ls    => { url => "${prefix}/list_projs" },
        #add => {},
    },
)->run;

# ABSTRACT: Manage short project names
# PODNAME:

=head1 SYNOPSIS

First, create C<~/projdir.conf>:

 long_dir  = ~/repos  ; directory which contains real/long project dirs
 short_dir = ~/proj   ; directory to hold short name symlinks

 ; only include dirs in long_dir matching these regexes
 long_include = ["^perl-", "^p5-", "^cpan-"]

Then:

 # list all project short names
 % projdir ls
 % projdir ls -l; # show detail


=head1 DESCRIPTION

Perl projects (typically CPAN distributions, Git repositories) usually have
rather long names, e.g.:

 perl-Text-ANSITable
 cpan-Perinci-Sub-Exporter
 p5-Data-Format-Pretty
 p5-Data-Format-Pretty-HTML
 p5-Data-Format-Pretty-JSON

In some places short single-word aliases are useful, e.g.:

 ansitable
 perisexp
 dfp
 dfph
 dfpj

For example, when typing directory names (even though there is shell tab
completion):

 % cd proj/dfph; # shorter than: cd repos/p5-Data-Format-Pretty-HTML

Or when referring in internal documents, writing and reading the short names
like C<dfpj> is much more convenient and faster (as long as they are already
familiar) than having to explicitly write C<Data::Format::Pretty::JSON>
repeatedly. Especially if you have hundreds of projects and have to
cross-reference one another when writing documentation.

I also use the short names in Org todo list:

 * TODO dfp: Add support for more environment variables
 * TODO perisexp: Support Sub::Exporter-style interface
 * TODO ansitable: Optimize performance

The short names are just symlinks to the real names. And this script is just a
simple CLI tool to help you manage them. I've used symlinks since at least
2008-2009, and have only started this tool in March 2015.
